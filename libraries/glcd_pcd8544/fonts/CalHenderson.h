/*
 *
 * SmallHollows
 *
 * Freeware fonts by Cal Henderson: http://www.iamcal.com/misc/fonts/
 *
 * (c) 1999-2011 the iamcal network http://www.iamcal.com/network/
 *
 * Converted with FontCreator
 * written by F. Maximilian Thiele
 *
 * http://www.apetech.de/fontCreator
 * me@apetech.de
 *
 * File Name           : SmallHollows
 * Date                : 10.07.2011
 * Font size in bytes  : 2916
 * Font width          : 10
 * Font height         : 7
 * Font first char     : 32
 * Font last char      : 128
 * Font used chars     : 96
 *
 * The font data are defined as
 *
 * struct _FONT_ {
 *     uint16_t   font_Size_in_Bytes_over_all_included_Size_it_self;
 *     uint8_t    font_Width_in_Pixel_for_fixed_drawing;
 *     uint8_t    font_Height_in_Pixel_for_all_characters;
 *     unit8_t    font_First_Char;
 *     uint8_t    font_Char_Count;
 *
 *     uint8_t    font_Char_Widths[font_Last_Char - font_First_Char +1];
 *                  // for each character the separate width in pixels,
 *                  // characters < 128 have an implicit virtual right empty row
 *
 *     uint8_t    font_data[];
 *                  // bit field of all characters
 */

#include <inttypes.h>
#include <avr/pgmspace.h>

#ifndef SMALLHOLLOWS_H
#define SMALLHOLLOWS_H

#define SMALLHOLLOWS_WIDTH 10
#define SMALLHOLLOWS_HEIGHT 7

static uint8_t SmallHollows[] __attribute__(( section(".progmem.data") )) = {
    0x0B, 0x64, // size
    0x0A, // width
    0x07, // height
    0x20, // first char
    0x60, // char count
    
    // char widths
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x08, 0x07, 0x08, 0x08, 0x07, 0x07, 0x08, 
    0x08, 0x08, 0x08, 0x07, 0x06, 0x0A, 0x08, 0x08, 0x07, 0x08, 
    0x07, 0x08, 0x08, 0x07, 0x07, 0x0A, 0x07, 0x08, 0x08, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x07, 0x08, 0x08, 0x07, 
    0x07, 0x08, 0x08, 0x08, 0x08, 0x07, 0x06, 0x0A, 0x08, 0x08, 
    0x07, 0x08, 0x07, 0x08, 0x08, 0x07, 0x07, 0x0A, 0x07, 0x08, 
    0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 
    
    // font data
    0xFC, 0x86, 0x82, 0xEA, 0xEA, 0x82, 0x86, 0xFC, // 65
    0xFE, 0x82, 0x82, 0xAA, 0x82, 0xD6, 0x7C, // 66
    0x7C, 0xC6, 0x82, 0xBA, 0xBA, 0x92, 0xD6, 0x7C, // 67
    0xFE, 0x82, 0x82, 0xBA, 0xBA, 0x82, 0xC6, 0x7C, // 68
    0xFE, 0x82, 0x82, 0xAA, 0xAA, 0xBA, 0xEE, // 69
    0xFE, 0x82, 0x82, 0xEA, 0x2A, 0x3A, 0x0E, // 70
    0x7C, 0xC6, 0x82, 0xBA, 0xBA, 0x8A, 0xCE, 0x78, // 71
    0xFE, 0x82, 0x82, 0xEE, 0xEE, 0x82, 0x82, 0xFE, // 72
    0xEE, 0xAA, 0xBA, 0x82, 0x82, 0xBA, 0xAA, 0xEE, // 73
    0xFE, 0x9A, 0xBA, 0x82, 0xC2, 0x7A, 0x0A, 0x0E, // 74
    0xFE, 0x82, 0x82, 0xEE, 0x82, 0x92, 0xFE, // 75
    0xFE, 0x82, 0x82, 0xBE, 0xA0, 0xE0, // 76
    0xFE, 0x82, 0x82, 0xFA, 0x82, 0x82, 0xFA, 0x82, 0x86, 0xFC, // 77
    0xFE, 0x82, 0x82, 0xE6, 0xCE, 0x82, 0x82, 0xFE, // 78
    0x7C, 0xC6, 0x82, 0xBA, 0xBA, 0x82, 0xC6, 0x7C, // 79
    0xFE, 0x82, 0x82, 0xDA, 0x42, 0x66, 0x3C, // 80
    0x7C, 0xC6, 0x82, 0xBA, 0xBA, 0xC2, 0xA6, 0xFC, // 81
    0xFE, 0x82, 0x82, 0xDA, 0x82, 0xA6, 0xFC, // 82
    0xFE, 0xA2, 0xA2, 0xAA, 0xAA, 0x8A, 0x8A, 0xFE, // 83
    0x0E, 0x0A, 0xFA, 0x82, 0x82, 0xFA, 0x0A, 0x0E, // 84
    0x7E, 0xC2, 0x82, 0xBE, 0x82, 0x82, 0xFE, // 85
    0x7E, 0xC2, 0x82, 0xBE, 0x82, 0xC2, 0x7E, // 86
    0x7E, 0xC2, 0x82, 0xBE, 0x82, 0x82, 0xBE, 0x82, 0xC2, 0x7E, // 87
    0xFE, 0x92, 0x82, 0xEE, 0x82, 0x92, 0xFE, // 88
    0x1E, 0x32, 0xE2, 0x8E, 0x8E, 0xE2, 0x32, 0x1E, // 89
    0xFE, 0x9A, 0x9A, 0xAA, 0xAA, 0xB2, 0xB2, 0xFE, // 90
    0xFC, 0x86, 0x82, 0xEA, 0xEA, 0x82, 0x86, 0xFC, // 97
    0xFE, 0x82, 0x82, 0xAA, 0x82, 0xD6, 0x7C, // 98
    0x7C, 0xC6, 0x82, 0xBA, 0xBA, 0x92, 0xD6, 0x7C, // 99
    0xFE, 0x82, 0x82, 0xBA, 0xBA, 0x82, 0xC6, 0x7C, // 100
    0xFE, 0x82, 0x82, 0xAA, 0xAA, 0xBA, 0xEE, // 101
    0xFE, 0x82, 0x82, 0xEA, 0x2A, 0x3A, 0x0E, // 102
    0x7C, 0xC6, 0x82, 0xBA, 0xBA, 0x8A, 0xCE, 0x78, // 103
    0xFE, 0x82, 0x82, 0xEE, 0xEE, 0x82, 0x82, 0xFE, // 104
    0xEE, 0xAA, 0xBA, 0x82, 0x82, 0xBA, 0xAA, 0xEE, // 105
    0xFE, 0x9A, 0xBA, 0x82, 0xC2, 0x7A, 0x0A, 0x0E, // 106
    0xFE, 0x82, 0x82, 0xEE, 0x82, 0x92, 0xFE, // 107
    0xFE, 0x82, 0x82, 0xBE, 0xA0, 0xE0, // 108
    0xFE, 0x82, 0x82, 0xFA, 0x82, 0x82, 0xFA, 0x82, 0x86, 0xFC, // 109
    0xFE, 0x82, 0x82, 0xE6, 0xCE, 0x82, 0x82, 0xFE, // 110
    0x7C, 0xC6, 0x82, 0xBA, 0xBA, 0x82, 0xC6, 0x7C, // 111
    0xFE, 0x82, 0x82, 0xDA, 0x42, 0x66, 0x3C, // 112
    0x7C, 0xC6, 0x82, 0xBA, 0xBA, 0xC2, 0xA6, 0xFC, // 113
    0xFE, 0x82, 0x82, 0xDA, 0x82, 0xA6, 0xFC, // 114
    0xFE, 0xA2, 0xA2, 0xAA, 0xAA, 0x8A, 0x8A, 0xFE, // 115
    0x0E, 0x0A, 0xFA, 0x82, 0x82, 0xFA, 0x0A, 0x0E, // 116
    0x7E, 0xC2, 0x82, 0xBE, 0x82, 0x82, 0xFE, // 117
    0x7E, 0xC2, 0x82, 0xBE, 0x82, 0xC2, 0x7E, // 118
    0x7E, 0xC2, 0x82, 0xBE, 0x82, 0x82, 0xBE, 0x82, 0xC2, 0x7E, // 119
    0xFE, 0x92, 0x82, 0xEE, 0x82, 0x92, 0xFE, // 120
    0x1E, 0x32, 0xE2, 0x8E, 0x8E, 0xE2, 0x32, 0x1E, // 121
    0xFE, 0x9A, 0x9A, 0xAA, 0xAA, 0xB2, 0xB2, 0xFE, // 122
    
};

#endif
